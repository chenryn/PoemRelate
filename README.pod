=pod

=head1 NAME

B<PoemRelate> - A web demo to recommand relate poems when the page show a metrical poetry.

=head1 PRINCIPLE

Store the poems in the mysql database, and store the vector of poems' relation in the redis database.
So, We run the offline script to spider poems from www, insert into mysql, compute and refresh relate vectors in redis.
And we access the web site to get poem content from mysql and recommand another poem based on vector.
The algorithm I used to determine the vector of two poems is: 

 Segment the poem and store a set in redis;
 Traveral the database and get the intersection between the keyword set of the just poem and every stored poem's set;
 Get the number of every set intersection;
 Sort the number list and store the top ten in redis;
 Provide a random element to web model when we request the page which show one poem.

=back

=head1 TODO

=over 2

=item 1
A template to show poem in the main frame and ajax the recommandation in the side frame.

=item 2
A spider/writer to insert thousands of hundreds of poems into databases.

=item 3
A mapreducer to sinter the keywords of poems after the new one being segmented.

=back

=head1 DEPENDENCIES

L<Dancer>, L<Redis>, L<DBD::mysql>, L<Template>, L<Lingua::ZH::WordSegmenter>, L<YAML>

=head1 INSTALL

=over 2

=item 1
Install the database server like mysql and redis.

C<yum install -y mysql-server mysql-devel redis-server>

=item 2
Install the denpendencies for dancer framework and simplified chinese words segment.

C<cpanm Dancer Template DBI DBD::mysql Redis YAML Lingua::ZH::WordSegmenter Dancer::Plugin::Database Dancer::Plugin::Redis>

=item 3
Run the standlone web server or any other you like.

C<perl PoemRelate/bin/app.pl>

=back

=head1 AUTHOR

C<(rao.chenlin@gmail.com) Jeff.Rao @ARGV>
L<http://chenlinux.com/>

=head1 COPYRIGHT

Copyright (c) 2012, Jeff.Rao. All rights reserved.
This program is free software; you may redistribute it and/or modify it under the same terms as Perl itself.

=cut
